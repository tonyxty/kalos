program = _{ SOI ~ toplevel* ~ EOI }

toplevel = _{ def }
def = { "def" ~ identifier ~ signature ~ ("extern" ~ ";" | compound_stmt) }

signature = { "(" ~ param_list ~ ")" ~ ("->" ~ type_expr)? }
param = { identifier ~ ":" ~ type_expr }
param_list = { (param ~ ("," ~ param)* ~ ("," ~ ellipsis)?)? }
ellipsis = { "..." }

stmt = _{ compound_stmt | var_stmt | assignment_stmt | return_stmt | if_stmt | while_stmt | expr_stmt }
compound_stmt = { "{" ~ stmt* ~ "}" }
var_stmt = { "var" ~ identifier ~ (":" ~ type_expr)? ~ ("=" ~ expr)? ~ ";" }
assignment_stmt = { expr ~ "=" ~ expr ~ ";" }
return_stmt = { "return" ~ expr? ~ ";" }
if_stmt = { "if" ~ "(" ~ expr ~ ")" ~ stmt ~ ("else" ~ stmt)? }
while_stmt = { "while" ~ "(" ~ expr ~ ")" ~ stmt }
expr_stmt = { expr ~ ";" }

expr = { primary ~ (operator ~ primary)* }
primary = _{ call | atom }
atom = _{ "(" ~ expr ~ ")" | literal | identifier }

call = { atom ~ "(" ~ arg_list ~ ")" }
arg_list = { expr? ~ ("," ~ expr)* }
operator = _{ power | multiply | divide | modulo | add | subtract |
    less_equal | equal | greater_equal | less_than | greater_than | not_equal }
	add = { "+" }
	subtract = { "-" }
	multiply = { "*" }
	divide = { "/" }
	modulo = { "%" }
	power = { "**" }
	less_than = { "<" }
	less_equal = { "<=" }
	equal = { "==" }
	greater_equal = { ">=" }
	greater_than = { ">" }
	not_equal = { "!=" }

type_expr = { auto | int | boolean }
    auto = { "auto" }
    int = { "int" }
    boolean = { "bool" }

literal = @{ ASCII_DIGIT+ }
identifier = @{ LETTER ~ (LETTER | NUMBER | "_")* }

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
